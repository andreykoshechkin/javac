
Component - элемент пользовательского интерфейса (TextField, ComboBox, CheckBox, Grid и т.д.). Ты также можешь создать свой класс, который будет компонентом.
		Пример: FRONT_BUTTON — класс, который является кастомным компонентом. Если ты посмотришь на иерархию наследования, то увидишь, 
		что FRONT_BUTTON является потомком {}.
		Также есть кастомный компонент MaskField, который принимает маску отображения. Очень удобен для указания мобильного телефона в формате +7 (999) 999-99-99.



UIScope — отвечает за жизненный цикл кастомного компонента. Он нужен, чтобы сделать твой компонент уникальным для каждого пользовательского интерфейса.
       
View — страница пользователя (сам UI-интерфейс). На View расположены разные компоненты.


@FrontOffice — кастомная аннотация (аналог @Route в Vaadin 24). Указывает, что данный класс является View. Сам URL для этого класса/View лежит в enum {}.



RequestEditView — "отец" всех View. Каждая View является потомком RequestEditView. Ты можешь найти этот класс, кликнуть на него и посмотреть, сколько у него потомков.
			 Так как он является родителем, созданные компоненты внутри RequestEditView будут доступны каждому потомку 
			 (если для конкретного компонента не предусмотрена дополнительная логика по отображению).
			 В этом классе, помимо компонентов, есть также много разных методов. Один из них {} отвечает за сохранение данных. 


BuildContent - Срабатывает тогда, когда пользователь загружает страницу или обновляет страницу. В buildContent происходит инициализация компонентов или иных объектов,
		   установка стилей и т.д.. 
 
UpdateContent - Всегда срабатывает после buildContent. в updateContent происходит получение данных из методов(например, из метода findAll()), установка этих данных в  
                в компонент и разные настройки для самого компонента (настройка режима 'Только для чтения', настройка видимости компонента и т.д.). 
                На практике, лучше создать отдельный метод, внутри которого ты вызываешь findAll(). 
 


