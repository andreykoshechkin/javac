Тест дизайн - процесс проектирование тестовой документации и того покрытия, которое мы хотим добиться тест.сценариями

Метрики по отслеживанию покрытие системы тестами: их есть две группы Code coverage, Required coverage:
Code coverage -      чаще всего тут речь идет о unit/IT тесты, мы можем посчитать/узнать процент покрытия тестами с помощью зависимостей
		     пример: jococo plugin - который генерирует HTML страницу, на которой будет отображенно процент покрытия тестов и даже 
		     методы, на которые мы писали тесты.

		     Code coverage считается по формуле {строкКодаПокрытыхТестыми / всегоСтрокКода * 100}	
 
Required coverage -  это когда у нас есть технические требование и мы проверям, соответствует ли наш продукт, его техническая составляющая, тому
		     что прописано в спеке. Для подсчета того, сколько процент тестов покрыт в случаи Required coverage принято использовать RTM.

required traceability matrix(RTM) - матрица тест покрытия в котором можно проследить на сколько мы покрыли наши Required тесты. В RTM на каждый тест 
				    принято писать кейс.
				    Пример: У нас есть текстовый редактов, наша задача протестировать метож open,save. Так вот, согласно RTM 
				    на функцию open будет заготовлено несколько тестов. 
				    Required:              RTM
				    Open           200кейс, 201кейс,210кейс	<-- тут указанно, что 200 и 201 кейс общий, а 210, 313 индивидуальный
				    Save           200Кейс, 201Кейс, 313Кейс
===========================================================================
Для Required coverage принято использовать следующие техники тест дизайна:
   (Equivalence Partition)
1: Техника эквивалентных классов - говорит нам о том, что вводимые значения нужно разбивать на диапазоны, т.е нет смысла тестировать 
				   то как система будет себя вести с каждым из возможных значений, тогда это будет бесконечное кол-тво тестов
				   Достаточно разбить данные на эквиволентные классы и для каждого подобного класса написать свой тест.
				   Эта техника помогает не только сокращать количество тестов, но и сохранять приемлемое тестовое покрытие.
				   
				   Эквивалентный класс - тот класс, который предпологает набор тестовых значений и наша система будет 
				   работать с любым значением из этого набора 
				   
				   Используется когда у нас есть большой поток входящих данных
   (Boundery values)
2: Техника граничного значение   -   это техника где мы должны взять границу и два ближайших значений этой границы. Таким образом 
				     мы с высокой долей вероятности найдем баги/деффекты. Если брать статистику, то баги как-раз таки 
  				     живут в границах и в соседних значений. При использовании технике граничных значений, нам впервую
				     очередь нужно узнать где эта граница находится, это уточнить можно у Product owner, так же, мы должны 
				     узнать величину шага, т.е если мы говорим про деньги, то у нас нету гарантий, что величина шага равна центам или доллару, 
				     если говорим про числа, то нет никаких гарантий, что величина шага равна единице
	
				     Используется когда у нас эквивалентные классы граничат
Техника эквивалентных классов и Техника граничного значение - хорошо подходит, когда нам нужно сократить количество тестируемых данных, отсюда мы сохраним время
время на тестинг, так как мы работает с диапазонами и значениями

   (State and Transitions Tech)
3: Анализ переходов и состояние  - это техника подразумевает, что любая система может находиться в различных состояниях, сначала может быть статической,
				   а потом динамической т.e некие действия могут изменять состояния. 
				   Для применения этой техники нужно: 
                                   Подумайте в каких состояниях может находится система, визуализируйте эти состояния и соедините стрелками те места, 
				   где должны быть переходы, а так же, визуализируйте те места где переходов не должно быть. После чего, на эти стрелки 
				   напишите позитивные и негативные тесты

   Анализ переходов и состояние  - Нужа чтобы всей командой подумать над тестами и сделать хорошее тестовое покрытие, чтобы ничего не забыть
				
