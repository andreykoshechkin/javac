Docker      - это технология которая создает и управляет контейнерами.
Container   - это некая сущность, которая создается с dockerImage и следовательно запускает dockerImage. Контейнер полностью изолирован
DockerImage - Это шаблон для создания контейнеров. DockerImage только для чтения, их нельзя изменить 

Действия: Мы создали приложение -> создали образ этого приложения -> сохранили его в контейнер -> отправили на DockerHub.

===========================================================================================================================
Приемущество использовать Docker:
1. Контейнер запускается в изолированной среде (Приложение лежит в контейнере, этот контейнер изолирован от других контейнеров и от внешней среды, к примеру, нам не важно какая ОС стоит)
2. Запуск контейнера может происходит на разных серверах
3. Все дополнителнье зависимости устанавливаются внутри контейнера, тем самым нам не нужно доустанавливать доп.зависимости
4. Docker обеспечивает маштабируемость, тем самым позволяет распределить нагрузку

===========================================================================================================================

Компоненты Docker:
Клиент:		Оболочка командной строки, которая позволяет вам взаимодействовать с Docker-сервером. 
       		Здесь вы вводите команды, такие как создание контейнеров, управление образами и т. д.

Docker-сервер:	Программное обеспечение, установленное на хост-машине, которое управляет контейнерами Docker. 
              	Этот сервер принимает команды от Docker-клиента и управляет контейнерами, включая их создание, запуск, остановку и удаление.

Служба:		Отвечает за создание и управление контейнерами. Сервер Docker использует службы для выполнения различных задач, 
		таких как создание новых контейнеров, масштабирование приложений и т. д.

Хост:		Это физическая или виртуальная машина, на которой установлен Docker. 
		Это может быть сервер в облаке или локальная машина разработчика. Docker использует ресурсы хоста для выполнения контейнеров.

Репозиторий:	Хранилище образов контейнеров. Здесь сохраняются готовые образы, которые можно использовать для создания контейнеров.
	

Реестр:		Хранилище репозиториев, которое может быть локальным или удаленным. Реестр отвечает за управление репозиториями, 
		а Docker Hub является примером общедоступного удаленного реестра, где разработчики могут публиковать и скачивать образы.