Смоделируем такую ситуацию:
 # Мы собрали контейнер и хотим внести изменения в один из наших сервисов, при этом мы хотим чтобы эти изменения сразу отобразились. Если мы внесем изменения в один из сервисов на нешем компьютере 
   и перебилдем docker-compose.yml то эти изменения никак не отразяться. Все дело в том, что внутри контейнера все сервисы статически и они будут в том состоянии, в котором изначально собирались,
   соответственно, новые изменения не будут применяться (без маппинга томов).
  
 # Если мы хотим настроить процесс разработки таким образом, чтобы при изменении директории на нашем компьютере, эти изменения автоматически применялись и внутри контейнера, нам нужно настроить маппинг томов.
   Проще говоря, нам нужно привязать директорию на нашем компьютере к директории внутри контейнера, тем самым, директория внутри контейнера будем заменена на директорию на нашем компьютере.

 # После того, как мы настроим маппинг томов, нам нужно остановить все контейнеры, а потом, заново их запустить.
============================================================================================================================================================================
1. Dockerfile сервиса frontend:
FROM node:alpine

EXPOSE 5000

WORKDIR /app

COPY package.*json /app/

RUN npm install

COPY . /app

CMD [ "npm", "run", "dev" ]


2. В docker-compose добавить:
frontend:
    restart: always
    build: ./frontend
    ports:
      - 3000:3000
    volumes:
      - /front/node_modules
      - /frontend:/front		<-- Тут мы говорим, замени директория frontend внуна контейнера, на директорию frontend но уже нашего компьютера, 

============================================================================================================================================================================

Фулл пример:
services:
  app:
    restart: always
    build: ./api
    ports:
      - 5555:5000
    volumes:
      - /app/node_modules
      - ./api:/app
    depends_on:
      - mysql
  
  frontend:
    restart: always
    build: ./frontend
    ports:
      - 3000:3000
    volumes:
      - /front/node_modules
      - ./frontend:/front
   