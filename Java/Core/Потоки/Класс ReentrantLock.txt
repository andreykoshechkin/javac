ReentrantLock - это класс, который синхронизирует потоки и в отличие от классического syncronized блока, у ReentrantLock есть метод который позволяет забирать монитор объекта  в 
разном порядке и при этом избежать deadlocа.


Метод Lock - Ждет пока не получится захватить монитор
Метод unlock - Пытается захватить монитор, если получилось захватить вернет true иначе false ДОДЖЕН БЫТЬ НАПИСАН В finale блоке	
метод tryLock - если может забрать монитор то вернет true иначе false (так же позволяет делать какие-то операции когда ресурс свободен или делать что-то другое когда ресурс 
занят)


Взаимная блокировка (Deadlock) - возникает тогда, когда несколько потоков, одновременно ждут друг друга.
Deadlock возникает тогда, когда мониторы на которых синхронизируются потоки, находятся в разном порядке

LiveLock - ситуация, когда несколько потоков залочены навсегда, тем не менее, они проделывают работу, но без прогресса.

Lock Starvation - ситуация, когда менее приоритетным потокам приходиться очень долго ждать(или ждать бесконечно) чтобы запуститься.



операция, которая позволяет выполнять синхронизацию в разных порядках:
 

    private Lock lock1 = new ReentrantLock();
    private Lock lock2 = new ReentrantLock();
while (true) {
            try {

                firstLock = lock1.tryLock();
                secondLock = lock2.tryLock();
            } finally {
                if (firstLock & secondLock == true) {
                    return;
                }
                if (firstLock) {
                    lock1.unlock();
                }
                if (secondLock) {
                    lock2.unlock();
                }
            }
        }
    }