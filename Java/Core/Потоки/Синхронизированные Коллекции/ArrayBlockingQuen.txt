ArrayBlockingQueue - потокобезопастная очередь с ограниченным размером. При создание ArrayBlockingQueue  нужно обязательно указать capasity:  var queue = new ArrayBlockingQueue<Integer>(10);

.offer() - 	 Добавляет элемент в очередь, но если очередь будет уже заполнена то элемент не будет добавлен
.put() -  	 Вставляет указанный элемент в хвост этой очереди, ожидая освобождения места, если очередь заполнена
.peek() -	 Извлекает, но не удаляет заголовок этой очереди, или возвращает null , если эта очередь пуста.
.poll() - 	 Извлекает и удаляет заголовок этой очереди или возвращает null , если эта очередь пуста.
.take() - 	 Извлекает и удаляет голову этой очереди, ожидая, если необходимо, пока элемент не станет доступным.

.put() and .take()  являються потокобезопастными методами
========================================================================================================================================================
Метод producer будет добавлять элементы в очередь,  а consumer будет забирать один элемент.
Один поток вызывает метод Producer, Второй поток вызывает метод Consumer.
 

  private static void producer() throws InterruptedException {
        int count = 0;

        while (true) {
            Thread.sleep(1000);						
            queue.put(count++);				
            System.out.println("Producer offer id queue: " + count);

        }
    }

    private static void consumer() throws InterruptedException {
        for (int i = 10; i >= 0; i++) {
            Thread.sleep(3000);
            System.out.println(queue.take());
            System.out.println(queue);
        }
    }
========================================================================================================================================================