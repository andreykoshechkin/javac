Классы:
					//LocalTime - содержит информацию о часах, минутах, секундаъ и наносекундах.
					//LocalDate - содержит информацию о годе, месяце, недели и дне.
					//LocalTimeData - Содержит информацию о всем, вышеперечисленном. 
				
					У всех этих классов приватный конструктор, а значит мы не сможем создать объект одного их этих классов
					Но с помощью метода of(); мы это сделать сможем: LocalDate ld = LocalData.of(2022,4,14);
					Эти классы не изменяемы

Методы класса LocalDate::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
now();	 				// Показывает текущий момент времени.
plusDays() or minusDays()			//Прибовляем дни или Отнимает дни. В параметрах указываем сколько дней прибивить.
plusWeeks(3) or minusWeeks(3)	  	//Прибовляем недели или Отнимает Недели. В параметрах указываем сколько дней прибивить.
plusYears(2) or minusYears(2)			//Прибовляем или отнимает года. В параметрах указываем сколько дней прибивить.
lc.isAfter(lc2)				//Объект класса lc был после объекта класса lc2: если да то вернет true иначе false.
lc.isBefore(lc2)				//Объект класса lc был до объекта класса lc2: если да то вернет true иначе false.




getDayOfMonth() or getDayOfYear();		//Возвращает день в месяце (в году) в приметивном тиме данных(int).
getDayOfWeek()				//Возвращает день в недели в формате data.
getMonth()				//Возвращает месяц в формате Month.
getMonthValue()				//Возвращает месяц в приметивном тиме данных(int).
getYear()					//Возвращает год в приметивном тиме данных(int).


Методы класса LocalTime::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
getNano() 				//Получить наноСкунды. Возвращает int.
getSecond()				//Получить секунды. Возвращает int.
getMinuts()				//Получить минуты. Возвращает int.
getHour()					//Получить часы. Возвращает int.

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
Класс DataTimeFormatter Применим для всех вышеперечисленных классов. 
DateTimeFormatter dateTimeFormatter1 = DateTimeFormatter.ofLocalizedDateTime(FormatStyle.MEDIUM);
System.out.println(localDateTime.format(dateTimeFormatter1));

ofPattern() 		//Позволяет создать свой  формат




