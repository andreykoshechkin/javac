Переопределение метода:
				//это когда класс потомок может взять какой-то метод родительского класса, повторив его сигнатуру, но при этом задать свою реализацию.
				//private, static finale методы не могут быть переопределенны.
				//Если у переопределенного метода есть какой-то return type, то у потомка в сигнатуре в качесвте return type может быть
				    либо сам роддительский класс или его потомок
				//Мы можем использовать менее строгий модификатор доступа чем тот, что указан у родителя. 
				    (Пример: у метода родителя дефолтный метод, то у потомка может быть public, это будет считаться за  переопределение метода)
				
				//Binding - это механизм, который определяет какой метод нужно вызвать, он бывает двух видов:
			           1: Статический байдинг - это вызов тех методов родителя, которые еще не переопределенны, а так же тех методов, которые впринцепе 
				        не могут быть переопределенны: то есть static final методы.  Происходит во время компиляции.
				   2: Динмачиский(Позднее свзявание) - Вызов переопределенного метода у потомка, то есть
				        Вне зависимости от того, какой Родительский класс указан у объекта, 
				        в первыую очередь будет совершен вызов того метода, который указан у объекта.
					Если у объекта отсутствует метод, тогда будет вызван метод РОДИТЕЛЯ.
				        к Динамическому(run time binding) относятся именно переопределенные методы.


::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Hidding Method:			//это перекрытие статический методов и не приватных переменных, 
			          (Пример Переменная Родителя и потомка имею одно и тоже названи, одно и тот же тип, но при этом являются разными ).
				//Почему нельзя переопределить static метод - Потому что static никак не связан с созданием объектов, в отличие от переопределение метода и полиморфизм
				//Относится именно к compile time binding
				//private методы не могут быть скрытыми потому что они не наследуются 


 В Java статические методы не поддерживают полиморфизм (в отличие от экземплярных методов), и потому не переопределяются в подклассах. Вместо этого, они могут быть перекрыты (hidden).

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Ключевое слово super		//Позволяет обращаться к переменной, методу или конструктору родителььского класса.
				  Пример:: 
				class TestA {
				    String a = "Andrey";
				}

				class TestB extends TestA {
    					String a = super.a + ", da";
				}
