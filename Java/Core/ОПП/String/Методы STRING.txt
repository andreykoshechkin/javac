concat(): объединяет строки
isEmpty(): Проверяет, является ли строка пустой
valueOf(): преобразует объект в строковый вид
values(): Перебрать все значения enum'a


join(): соединяет строки с учетом разделителя(в параметрах массив)
        String [] value =  {"1","2","3","4","5"};
        var join = String.join("-", value);
        System.out.println(join);


сompareTo(): сравнивает две строки

contains(): проверяет, содержится ли одна строка(слово)внутри другой, и возвращает соответствующее логическое значение - true или false.()Проверяет,есть ли вводимое слово в нашем предложение

charAt(): возвращает символ по индексу

getChars(): возвращает группу символов

equals(): сравнивает строки с учетом регистра

equalsIgnoreCase(): сравнивает строки без учета регистра

regionMatches(): сравнивает подстроки в строках

indexOf(): возвращает индекс символа 

lastIndexOf(): находит индекс последнего вхождения подстроки в строку

startsWith(): определяет, начинается ли строка с подстроки

endsWith(): определяет, заканчивается ли строка на определенную подстроку

replace(): может заменить один  символ или слово на другое.

trim(): удаляет начальные и конечные пробелы

substring(): возвращает подстроку, начиная с определенного индекса до конца или до определенного индекса

toLowerCase(): переводит все символы строки в нижний регистр

toUpperCase(): переводит все символы строки в верхний регистр

hasNestLine(): считывает строки пока они не закончатся. 

Next(): Считывает строку до первого пробела. новый метод next() считает второе слово после первого проьбела. 
Пример(String phrase1 = sc.next();
        String phrase2 = sc.next();
        Мы вводим "Я люблю"
        System.out.println(phrase1);
        System.out.println(phrase2););
	Получаем Я
		 Люблю

split(): разделяет строку по символу, который указан в параметрах метода split(txt документе должны быть эти символы в тч пробел) и возвращает пробел.

Нужно отсортировать список каких-нибудь слов по алфавиту Чтобы сравнить слова, мы должны сделать это посимвольно. Символьный тип в Java - это char. Сравним первые буквы:

System.out.println("Python".charAt(0) > "Java".charAt(0)); // true


Методы класса String:

charAt(int index);            // возвращает букву строки по индексу, [] - так нельзя!
length();                  // возвращает длину строки
toUpperCase();               // приводит строку к верхнему регистру
toLowerCase();               // приводит строку к нижнему регистру
compareTo(String anotherStr);    // лексикографическое сравнение строк
contains(String str);            // проверяет содержится ли строка внутри строки
startsWith(String str);           // проверяет начинает ли строка на строку
endsWith(String str);              // проверяет заканчивается ли строка на строку
indexOf(String str);              // возвращает позицию первого вхождения подстроки в строку
lastIndexOf(String str);         // возвращает позицию последнего вхождения подстроки в строку
split(regex reg);               // разбивает строку на массив строк по регулярному выражению
toCharArray();                 // возвращает массив с символами 

Методы класса StringBuilder, которых нет в классе String:
append(String str);           // вставка в конец за константное время
set(int index, char ch);        // изменение буквы внутри строки
delete(int from, int to);        // удаление куска строки
deleteCharAt(int index);        // удаление символа по индексу
insert(int index, String str);      // вставка строки по индексу
reverse()                            // обратный порядок симовлов


