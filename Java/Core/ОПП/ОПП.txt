Объектно-ориентированное программирование — методология программирования, основанная на представлении программы в виде совокупности объектов, 
каждый из которых является экземпляром определенного класса, а классы образуют иерархию наследования. 
Процедурное программирование непременим для создание сложных программ.


Класс - это шаблон, описывающий поведение объекта
Объект - это экземпляр класс


Полиморфизм - Способность обрабатывать данные разных типов имеет дыке формы. 
ad-hoc - это механизм приведение данных, и способность перегружать методы

параметрический полиморфизм - это маханизм который позволяет обрабатывать значения разных типов.
Одна форма множество реализаций: 		//когда мы переопределяем метод базового класса, мы можем задать свою реализацию и в данном случае метод базового класса является 
						  формой.
						  Множество реализаций означает, что мы можем реализовать метод как мы хотим

Динамический полиморфизм не поддерживает вызов статических методов


Интерфейс - это некий контракт на обязательное выполнениек каких-либо методов у объектов без реализации этих методов.
Интерфейсы нужны для того чтобы, мы были уверенны, что у каких то классов есть методы
Интерфейсы 100% Абстрактны и делать из них finel не имеет смысла 


Инкапсуляция - Инкапсуляция это объединение данных и методов для работы с ними в один объект. Инкапсуляция обеспечивает сокрытие, но не является им.
Инкапсуляция обеспечивается при помощи модификатора доступа.
Пример: у нас есть системный блок который состоит их разных деталей и мы не должны влезать внутрь системного блока и что-то делать с деталями без надобности.

Изолированный в пакете(packeg protecded) -- определенный классы находятся в йерархии пакетов


Наследование - это когда один объект приобритает атрибуты другого объекта, но при это он может иметь свои атрибуты;
Реализуется наследование путем создания классов на основе уже существующих классов.
Переменная класса Родителя можент ссылаться на объект потомка. Переменная класса потомка не может ссылать на объект класса родиль
Мы можем ссылать переменную типа СуперКласса(Родитнля) на (Саб класс)потомка но без upcasting мы не сможем это сделать наоборот. 
При этом, y этой переменной СуперКласса будут доступны только те атрибуты, что есть у родителя...

Ассоцияация является альтернативой наследования - ассоциация, это когда в текущем объекте вызываетс другой объект

Что подразумевают в плане принципов ООП выражения «является» и «имеет»?
«является» подразумевает наследование. «имеет» подразумевает ассоциацию (агрегацию или композицию).



Позднее связывание - Вне зависимости от того, какой Родительский класс указан у объекта, в первыую очередь будет совершен вызов того метода, который указан у объекта.Если у объекта отсутствует метод, тогда будет вызван метод РОДИТЕЛЯ.
Решение о том, какой метод вызвать, принимается во время выполнения программы



Конструктор:				// Конструктор это механизм который инициализирует поля объекта. Объект без параметров не имеет смысла 
						(Пример: объект "Человек" не может быть создан без имени и фамилии) 
					//Конструктор нельзя наследовать или переопределять, но потомок может его вызывать с помощью ключевого слово super().
					//Конструктор может выбрасывать исключения.
					//Создание конструктора происходит взависимости от аргументов и по иерархии вверх. 

					//при создание объекта вызываеться конструктор потомка --> контруктор его родителя --> и тд до конструктора
						Object... потом все спускается Конструктор Object --> контруктор его потомка --> контруктор потомка родителя
					//При создании конструктора, поле в классе будет иметь приоритет выше чем параметр
		


Перегрузка методов - Перегрузкой методов называют те методы, у которых одинаковые названия но разные параметры(параметры могут отличаться по колличеству, порядку и типу данных)

Переопределение методов - это когда класс потомок может взять какой-то метод родительского класса, повторив его сигнатуру, но при этом задать свою реализацию.
Если у метод у родителя что-то возвращает, то и переопределенный метод в классе потомка должен возвращать либо return type родителя либо его потомка иначе 
возникнет ошибка компиляции.

Мы не можем переопределять static,final,private методы

Hidding Method - это перекрытие статический методов и не приватных переменных,(Пример Переменная Родителя и потомка имею одно и тоже названи, одно 
и тот же тип, но при этом являются разными ).
Почему нельзя переопределить static метод - Потому что static никак не связан с созданием объектов, в отличие от переопределение метода и полиморфизм

finale атрибуты не могут быть переопределенны или быть hiding(скрытыми)
finale класс не может иметь потомков.
Констуктор не можеть быть finale

Аннонимный класс - это тот класс, который не имеет имени и создается на месте,
Анонимные классы часто используются для реализации интерфейсов, без явного определения нового класса.

Абстрактные классы - Абстрактными классами называют те классы, которые являются концепцией (не являются сущностью, Пример: Класс - Автомобиль является концепцией. Класс - тойота(Наследник Машины) является сущностью)

Абстрактный метод - может быть только в Абстрактном классе, при этом, он не имеет тела метода. Наследники должны реализовать метод























