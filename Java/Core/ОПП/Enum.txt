Enum:				//Являеться перечислением.
=================================================================================================================================				
				//В  enum может быть конструтор и он должен быть private, а так же абстрактные методы;
					 private EnumLessons(String age)		<---Конструктор
					  	 this.age = age;
  					 public abstract String desc();			<---Метод
=================================================================================================================================				
				//В Enum могут быть переменные, а сами поля enum'a должны их заполнять.
				 NAME("Richard"){	<--- поле
     				 	  @Override	<--- Абстрактный метод
        				public String desc() {
           				return "HELLO DEVELOPER";
     				}}
=================================================================================================================================
				//Enum может имплементить интерфейс


Если мы создаем private переменную, то поля Enum'a принимают конструктор. То есть, в круглых скобках нам нужно проинициализировать поле

NAME("Andrey", "Koshechkin"), 			<---- Поле, которое принимает параметры 

private String name;				<---- Переменные
private String LastName;

EnumLessons(String name, String lastName) {	<--- Конструктор
this.name = name;
 
public String nameDeveloper() {			<--- метод интерфейса
return "Developer : " + NAME.getName();
}


