Heap:			//Область памяти для наших объектов. Когда мы создаем объект через new, мы по сути выделяем память в хипе для этого объекта
Stack:			//Хранит в себе ссылки на объекты. По умолчанию для ссылок выделяется 4 байта памяти, но это завист от размера хипа.
			  Если хип будет 32 гигабайта то для ссылке будет выделенно 8 байт
			//Все приметивы храняться в стеке.
			//Когда поток приложения закончит работу, то стек стирается, а все объекты, что остались в хипе становится уже мусором, который почистит сборщик мусора

Сборщик мусора: 	//Удаляет те объекты в хипе, на которых никто не ссылается 
			  Любой объект, созданный в куче, имеет глобальный доступ и на него могут ссылаться с любой части приложения.

MetaSpace 		//Область памяти где храняться классы
каждому потоку создаётся свой стек
===================

OutOfMemoryError - это это Error, которое свидетельствует о том, что  недостаточно свободной памяти


классификация:

Java heap space：это ошибка пространства хипа, приложение пытается добавить больше данных в хип, 
но для этого недостаточно места, возможно, имеется много физической памяти, ноJVM Существует ограничение размера хипа.

GC overhead limit exceeded: ошибка которая свидетельствует на о том что Приложение исчерпало почти всю доступную память, 
и сборщик мусора не смог восстановить ее или может вернуть только 2% свободного пространства.



Permgen space: Указывает на то, что область памяти постоянного поколения исчерпана,
 а постоянное поколение в основном загружается и сохраняется вPermGen Основной причиной этой ошибки является то, 
что слишком много классов или слишком большие классы загружаются в постоянной области.

Metaspace: Сообщение о том что область метапространства исчерпана в памяти.

Unable to create new native thread：Java Приложение достигло предела числа потоков, которые оно может запустить.

Out of swap space: Пространство подкачки также использовалось, 
и новая попытка выделения не удалась из-за недостатка физической памяти и пространства подкачки.

Requested array size exceeds VM limit: Когда запрашиваемый размер массива превышает лимит виртуальной машины, 
это означает, что приложение, аварийное завершение которого вызвано ошибкой, пытается выделитьJava Массив, который может поддерживать виртуальная машина.
	
