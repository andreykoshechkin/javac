 Регулярные выражения:			//Нужны для создания шаблона, который позволит выполнять различные операции
					//Более производительны чем методы String

Варианты создания RegEx			Pattern pattern = Pattern.compile("Какое-то рег выражение");
        				Matcher matcher = pattern.matcher(String);

[A-D]					//Одно из букв в диапазоне
ema.(Точка в конце)			//после выражение может идти один любой символ. Найди слова которые начинаются на ema и добавь к нему 4 любой символ.Вывод ema%
					  (если символ % является 4).

^And					//Начинается ли вся наша строка на And. (Если в предложение первое слово начинается на And то он выведет иначе ничего не выведет) 
ile$					//Заканчивается ли вся наша строка на ile
\\d+,\\d*				//Выведи все цифра которые есть в нашем предложении.
\\d					//Выведи по одной цифре
\\-					//Выведи только те числа которые начинаются с -		 	#Пример:  \\-\\d+					
\\+					//Выведи только те числа которые начинаются с +		 	#Пример:  \\+\\d+							
\\[-+]					//Выведи только те числа которые начинаются либо с - либо с +	#Пример:  ([-+]\d+)
\\[-+]?					//Выведи все числа в том числе которые начинаются с - или с +	#Пример:  ([-+]?\d+)
\\"					//Выведит " в строке, Java будет воспринимать именно как символ
\\D					//Выведит все символы и буквы, при этом цифры выводить не будет
\\w					//Выведит все символы текста
\\w+					//Выведит все слова и цифры текста
\\W					//Выведит только символы
\\W+					//Выведит только символы и если за этим символ есть еще один символ, то выведит и его 
[A-Za-z]\w+				//Выведит тольк слова
\\d{Количество}				//Выведит только числа с конкретным количество \\d{2} - цифры будут разжелены на 2
\\b					//Граница, \\b\\d+{2}\\b не больше двух чисел \\b\\d+{3}\\b не больше 3
$n					//Ознаает группу
замена множества пробелов
text = text.replaceAll(" {2,}", " ");


String regex = "+375 (29) 898-12-13";
        Pattern pattern = Pattern.compile("(\\+375).\\(\\d{2}\\).\\d{3}.\\d{2}.\\d{2}");

        Matcher matcher = pattern.matcher(regex);

        System.out.println(matcher.matches());
        while (matcher.find()){
            System.out.println(matcher.group());
        }