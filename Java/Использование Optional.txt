Использование Optional в Java имеет несколько преимуществ:

1) Избегание NullPointerException: Одной из основных проблем в Java является NullPointerException, 
   которые могут возникнуть при попытке обратиться к методам объекта, который может быть null.
   Optional позволяет избежать этой проблемы, предоставляя удобный способ обработки отсутствия значения.

2) Ясный код: Использование Optional делает ваш код более ясным и читаемым. 
   Это позволяет читателям кода легче понимать, что метод может вернуть "пустое" значение.

3) Избегание проверок на null: При использовании Optional,
   вам не нужно писать множество проверок на null, что делает код более компактным.

4) Более чистые исключения: Optional позволяет легко выбрасывать исключения,
   когда значение отсутствует, что делает управление ошибками более удобным.

5) Согласованный стиль кодирования: Использование Optional может способствовать согласованности стиля кодирования в вашем проекте,
   так как это стандартный подход для работы с возможными отсутствующими значениями.

6) Удобство возвращения значений по умолчанию: Вы можете легко вернуть значение по умолчанию, 
   если значение отсутствует, используя методы orElse, orElseGet и orElseThrow класса Optional.



Optional.of(T value):
Optional.of() принимает параметр value, который должен быть непустым (не null). Если value является null, этот метод немедленно бросает NullPointerException.
Используйте Optional.of(), когда вы уверены, что значение не может быть null, и если оно таковым окажется, это ошибка, которую вы хотите обнаружить как можно раньше.
Пример использования Optional.of():

Optional.ofNullable() также принимает параметр value, но он может быть как непустым (не null), так и пустым (равным null). Если value равен null, то этот метод создаст пустой Optional.
Используйте Optional.ofNullable(), когда значение может быть как непустым, так и пустым, и вам не нужно создавать NullPointerException, если оно null.
