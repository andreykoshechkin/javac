Примечание: И лист и Массив должны быть отсортированны.  Метод get реализует бинарный поиск
Как джаве удается найти нужный элемент:
					//Когда мы добавляем элементы в массив, эти элементы помещаются в область памяти и им присваивается адрес ввиде байт.
					//Далее происходит вычесление: Адресс нулевого элемента + индекс * размер элемента (размер элемента зависит от типа данных int=4 long=16)
					102 + 8 * 4 = 134.  134 это тот самый адресс ввиде байт и именно там храниться элемент в памяти под индексом 4

Бинарный поиск реализует O(lon n)

Для String происходит почти тоже самое, за исключением, что в области памамя хранитья 

Collection.binarySearch - в параметры нужно передать лист и указать что мы ищем.	 List<Integer> list = new ArrayList<>();
      											 list.add(3);
      						 					 list.add(-91);
     										         list.add(39);
        										 list.add(5);
        										 list.add(766);
      											 int i = Collections.binarySearch(list, 3);

Arrays.binarySearch - в параметры нужно передать массив и указать что мы ищем.

Длина массива делиться пополам, далее происходит проверка условия, наше число > or < числа по середине, если больше то правая половина делиться пополам если меньше то левая.

::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

Big O notation:
		O(1) - Алгоритм выполняется за константное время! является самым быстрым, т.е вне зависимости от количества элементов, 
		       операция будет проделана за конкретное время. К примеру, поиск или получение элемента по индексу, произойдет за одно и тоже время.

		O(n) - Линейный алгоритм! является медленным, так как для получение какого-то результата, приходиться выполнять шаги и с каждым разом
		       количество шагов увеличивается.




В случае, когда вместимость ArrayList полностью не использованна, то добавление в конец происходит за O(1). Впротивном случае, arraylist создает новый массив и происходит это за O(n).  
В случае, когда нам нужно добавить элемент в середину, ArrayList придеться сдвинуть все элементы влево, это проиходит за O(n); 	

В linkedList - добавление элемента в середину или удаление элемента происходит за O(n);				
Добавление в начало происходит за O(1);
Бинарный поски - O(lon n)
Двоичное дерево (бинарное дерево) - это когда у вершины может быть только два потомка
Красно-черное дерево - это двоичное,сбалансированное дерево (Map set) операция по вставки удаления и выборки проиходит за O(log N) - пример бинарный поиск
Но соблюдение свойств красно-черного дерева позволяет обеспечить выполнение операций вставки, удаления и выборки за время $O(log N)$.