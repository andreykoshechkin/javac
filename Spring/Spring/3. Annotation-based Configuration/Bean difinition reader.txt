Как работает component-scan: работает он с помощью класса ComponentScanBeanDefinitionParser, который автоматически подтягивает Bean Definition Readers, который делиться на 4 группы. А какой конкретно Bead Definition Readers мы будет использовать, завист уже от того, каким способом мы решили создать BeanDefinition.

ComponentScanBeanDefinitionParser: Именно он сканить наш compoenent-scan элемент в нашем XML файле.


В Случае XML-based:
1) Это BeanDefintionrReader у которого есть 3 наследника и один из них XmlBeanDefinitionReader который используется поумолчанию и занимается тем, что парсит XML и выявляет те
   элементы, которые помечены элементом bean и на основании этого создается bean definition.
   Наследники: XmlBeanDefinition, GroovyBeanDefinition(Делается с помощью скриптов), PropertiesBeanDefinitionReader.э


В Случае Annotation-based:
2)ClassPathDefinitionScanner и AnnotatedBeanDefinitionReader именно эти классы используются, когда мы хотим просканировать какой-то пакет и найти те классы, которые помечены 
  аннотацией @Component. Для реализации используются фильтры. Эти два классы почти не отличаются, разве что AnnotatedBeanDefinitionReader дает возможно в ручную зарегистрировать   бины


В Случае Java-based: 
3)ConfigurationClassBeanDefinitionReader который использует аннотации @Configuration и @Bean
==================================================================================================================================================================================================================================================================================================================================================================
Сам фильтер:
    <context:component-scan
            base-package="org.example.spring.*" <---Фильтрация по пути
            annotation-config="true"            <---Подключает annotation-config
            name-generator=""			//На практике не встречается
            resource-pattern=""                 <---Поиск по классу **/*.class тоже не использует
            scope-resolver=""                   <---фильтор по Scope(singlton, prototype и ьтд)
            scoped-proxy=""                     <---Создай proxy класса. interfaces dynamic proxy, targetClass proxy через наследования, no не создавать proxy
            use-default-filters=""              <---По-умолчанию true, который использует фильтры для того что бы находить бины в base-package, false - не использовать фильтры

    />

Типы фильтров
annotation  - ищет все класса отмеченные аннотацией @Component
assignable  - у класса вызывается метод assignableFrom куда мы передаем интерфейс/класс и если этот класс наследуеться интерфейса или класса, то создается bean definition
regex 	    - ругулярные вырожения на основании имени класса
aspect      - с помощью аспектно ориентироованного програмирования
custom	    - 

ПРИМЕР:
 <context:component-scan

     base-package="org.example.spring.*"	<--Ищи мне в директории spring
     scoped-proxy="no"				<--Без создавай proxy
     use-default-filters="false">		<--Я хочу использовать свой фильтр
 
     <context:include-filter type="annotation" expression="org.springframework.stereotype.Component"/>	<Создай бины из тех классов, которые отмечены аннотацией Component
     <context:include-filter type="regex" expression="org\..+Repository"/>	<--Создай бины из тех классов, которые заканчиваются на "Repository"

 </context:component-scan>















