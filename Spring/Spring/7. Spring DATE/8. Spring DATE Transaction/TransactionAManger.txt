TransactionManager  //Отвечае за  работу с транзакциями и представляет два способа по управлению транзакциями:
		       1. С помощью аннотаций и для этого используется аннотация @Transactional
		       2. И в ручном виде, когда мы сами пишем код для управлением транзакций TransactionTemplate
 
==============================================================Как работает аннотация @Transaction под копотом:==================================================================
@Transactional	//Автоматически открывает и закрывает транзакцию, ставится над классом и методом, причем, если эта аннотация стоит над классом, то управление транзакциями будет над всеми методами. Если же аннотация стоит и над классом и над методом то у метода будет приоритет.


За конфигурацию транзакций отвечат класс TransactionAutoConfiguration, который содержит ряд классов, и какой класс будет задействован зависит от того, каким способом мы хотим управлять транзакциями. К примеру за конфигурацию аннотации @Transaction отвечает класс EnableTransactionManagementConfiguration,  который основан на управлением транзакции с помощью proxy(CglibProxy по умолчанию и JdkDynamicProxy), а в тех случаях, когда мы сами решили написать код, который будет автоматически открывать/закрывать транзакции используется уже TransactionTemplateConfiguration


CglibProxy:
У нас есть CglibProxy какого-то объекта и этот proxy extend реальный объект, а значит, у него будут все поля и методы реального объекта. Соответственно, вместо вызова рельного
метода у реального объекта сначало происходит вызов метода proxy:
 1. открытие транзакции 
 2. вызывается метод CglibProxy, который вызывает реальный метод
 3. закрытие транзакции. 

