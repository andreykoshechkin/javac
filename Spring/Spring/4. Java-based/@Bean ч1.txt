@Bean 		//Тот объект который вернулся нам из метода становиться бином. Эту аннотацию мы можем ставить не только в классах помеченных аннотацией @Configuration, но и 
		  в других компонентах, но так делать не стоит! Потому-что классы @Configuration сканируются BeanFactoryPostProcessor, а значит будут обрабатываться в 
		  первую очередь


@Import(WebApplicationConfig.class)
@Configuration
@ComponentScan(basePackages = "org.example.spring.*", scopedProxy = ScopedProxyMode.NO, includeFilters = {
        @ComponentScan.Filter(type = FilterType.ANNOTATION, value = Component.class)
})
@PropertySource("classpath:application-db.properties")
public class ApplicationConfig {

    @Bean
    public ConnectionManager pool1(){					<--- Возвращаю объект типа ConnectionManager и с помощью аннотации @Bean делает из этого объекта бин
        return new ConnectionManager("test-name", "test-pass", 23);
    }
}

================

Параметры @Bean: 
initMethod - метод для инициализаци, теперь мы можем не указывать у ConnectionManager @PostConstructor	
destroyMethod - метод для очистки ресурсов, теперь мы можем не указывать у ConnectionManager @PreDestroy
value - задаем id

public class ApplicationConfig {

    @Bean(initMethod = "init", destroyMethod = "destroy", value = "connectionPoolBean")
    public ConnectionManager pool1(){
        return new ConnectionManager("test-name", "test-pass", 23);
    }
}
