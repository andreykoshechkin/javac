DI container 		// Это объект, который занимается тем, что создает другие объекты и внедряет в них зависимости.
			   Сам  DI container представлен ввиде map, где ключем является String, а значением Been.

Been			//Это объект который был создан с помощью DI conteiner со всеми нужными зависимостями. Его отличие от обычного объекта 
			 в том, что бинами принято называть те объекты, которые управляются Spring-ом
Been difinition		//Это совокупность объектов, которые говорят как строить Been, конфигурировать и внедрять зависимости.
			 Простыми словами: Been difinition чертеж по которому строится Been

Spring приложение 	//Состоит из набор бинов, которые связаны через DI контейнер.

POJO			//Обычный объект с набором свойст, а так же с геттерами/сеттерами и конструктором(DTO, Entity)
 

Been difinition	это шаблон на основанни которого строиться been
Ioc contener берет POJO и на основанни Been difinition создает been класса

================================================================================================================================================================
IoC container реализует один из интерфейсов:
1.beans.factory.BeenFactory.
2.context.ApplicationContext.	<---Предпочителен + реализует интерфейс beans.factory.BeenFactory, что дает нам больше функционала
================================================================================================================================================================

Мы можем создать Been difinition 3мя разными способами:
1)XML-based - в настоящее время редко используеться. В основном используеться для старых проектов
2)Annotation-based
3)Java-based	
