//@Transactional(readOnly = true) флаг readOnly = true добавляет оптимизацию на уровне БД и Api. Если БД не поддерживает оптимизации, то в случаи hibernate flush нашей сессии не произойдет
//Хорошей практикой будет ставит readOnly true, а те методы, которые предназначены не для чтения(create,update) над ними нужно ставить отдельно аннотацию @Transcational


@Service
@RequiredArgsConstructor
@Transactional(readOnly = true)
public class UserService {

    private final UserRepository userRepository;
    private final UsersMapper usersMapper;
    private final UserCreateEditMapper createEditMapper;


    public List<UserReadDto> findAll() {
        return userRepository.findAll()
                .stream().map(usersMapper::transferToDto).toList();
    }

    public Optional<UserReadDto> findById(Long id) {
        return userRepository.findById(id).map(usersMapper::transferToDto);
    }


    @Transactional
    public UserReadDto create(UserCreateEditDto user) {
        return Optional.of(user)
                .map(createEditMapper::transferToEntity)
                .map(userRepository::save)
                .map(usersMapper::transferToDto)
                .orElseThrow();
    }


    @Transactional
    public Optional<UserReadDto> update(Long id, UserCreateEditDto user) {
        return userRepository.findById(id)                              //На этом этапе мы ищем entity в базе данных, ведь его может и не быть
                .map(entity -> createEditMapper.map(user, entity))      //Если мы нашли entity, то заменяем данные у entity, на те что пришли от клиента(dto)
                .map(userRepository::saveAndFlush)                      //Сохраняем и делаем flash сессии, чтобы данные зафиксировались
                .map(usersMapper::transferToDto);                       //Возвращаем dto, так как в контроллере стоит условие, что после выполнение операции переведи нас на страницу user'a по его id
    }


    public boolean delete(Long id) {
        return userRepository.findById(id)          //На этом этапе мы ищем entity в базе данных, ведь его может и не быть
                .map(user -> {                      //Если entity нашли то удаляем его
                    userRepository.delete(user);
                    return true;                    //И возвращаем true
                }).orElse(false);              //На этом этапе мы будем, если findById(id) не наше entity в БД
    }
}


