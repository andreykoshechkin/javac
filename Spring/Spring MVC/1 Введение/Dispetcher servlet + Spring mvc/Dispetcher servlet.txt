Dispetcher servlet 	//Сервлет через который проходят все запросы чтобы в дальнейшем перенаправить эти запросы уже на контроллеры.
			  Spring автоматически создает dispetcher servlet.\
			  Под копотом происходит следующии действия: Браузер -> Apach Tomcat -> Dispetcher servlet -> API(Controller API, REST API)
		
Как работает Dispetcher servlets: все то, что написано ниже, описанно в методе doDispatch.

1. Dispetcher servlets получает HTTP запрос, и первое что он делает это определяет по url какой handler(обработчик) нужно использовать,
   после чего он  обращается к этому (handler)обработчику чтобы тот вернул ему контроллер и этот контроллер с помощью своих методов  
   обрабатывает HTTP запрос. Кроме того, обработчик содержит еще и interceptor, которые срабатывают перед и после вызова контроллера. 
   
   Далее определяется handlerAdapter  
   на этом этапе запускается цепочка вызовов, а именно, наш контроллер перенаправит запрос на уровень service -> repository -> database.
   В итоге, handler возвращает нам ModelAndView который включает в себя Model(Наши данные) и View(View это то что мы должны отобразить клиенту, Пример: HTML или JSP)
   
   И на основании полученного ModelAndView формируется View Resolver, который по названию нашей странички HTML/Jsp знает где ее найти физически в нашем приложении.
   Если все хорошо, то обработка HTTP запроса заканчивается, а если же мы получили exception то мы обрабатываем его отдельно с помощью 
   handlerExceptionResolver <-- сама обработка заключается в том, чтобы перенаправить клиента на другую страницу или вернуть 500 страницу
     

Дополнительно:

   HandlerAdapter содержит в себе ряд других объектов и впервую очередь HandlerAdapter содержит ссылку на WebApplicationContext,
   как только мы подключили Spring web у нас будет создавать именно WebApplicationContext. Кроме того, HandlerAdapter включает в себя
   ArgumentResolver и ReturnValueHandler

   ArgumentResolver   - дает понять, что внедрить в методы контроллера(Мы можем попросить Bean, или типы данных)
   ReturnValueHandler - занимается тем что обрабатывает возвращаемое значение, которое мы получили от контроллера(Конда контроллер возвращает View,
			именно  ReturnValueHandler знает как обрабатывать это view)

   После подключения spring-web все контроллеры возвращают нам ModelAndView.
	
   В одном контроллере мы можем добавляеть сколько угодно GET/POST методов

   interceptor - это аналог фильтра