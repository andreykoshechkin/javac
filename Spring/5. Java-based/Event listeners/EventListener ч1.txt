EventListenerMethodProcessor		# Это бин, который отвечает за слушателей событий(EventListener) его прямая задача, это найти тот бин, у которого метод отмечен аннотацией @EventListener 
					  чтобы в последующем зарегистрировать этот метод как обработчика событий, данный бин срабатывает на этапе beanFactoryPostProcessor. 
					  Для реализации EventListenerMethod нужно поставить аннотацию @EventListener над методом, тогда этот метод станет слушателем событий. 



Event, Listener				# В паттерне "Наблюдатель" событий есть два основных компонента: 
					  1. Event - событие (Это какой-то класс с набором полей),  2. listener - слушатель событий. Обычно это класс с одним методом, этот метод принимает event.
					     Общий механизм выглядет таким образом, что мы можем подписаться на определенное событие, тем или иным слушателем.


Реализация Event(события)	 	# Чтобы мы могли регистрировать события, класс должен унаследоваться от EventObject лучшим вариантом будет унаследоваться от ApplicationEvent.


Пример: 
 1. Создаем Event
  public class CustomEvent extends ApplicationEvent {

    private final Operation operation;

    //Object object-Объект, на котором изначально произошло Событие.
    //ApplicationEvent является потомком EventObject, а конструктор EventObject
    //требует чтобы мы передали объект, на котором произошло Событие.
    //Первый параметр представляет объект, на котором произошло событие. Второй параметр - операция, связанная с событием.
    public CustomEvent(Object object, Operation operation) {
        super(object);

        this.operation = operation;
    }


    public enum Operation{
        CREATE,DELETE,UPDATE
    }

    public Operation getOperation(){
        return operation;
    }
}

2. Создаем слушателя. В нашем примере, мы иммитируем логирования сущности. Тут можем быть любая логика, к примеру логика по Ведению Аудита
@Component
public class CustomListener {
	
     @EventListener
    public void acceptEntity(CustomEvent customEvent){
        System.out.println("С сущностью: " + customEvent + " произошла операция" + customEvent.getOperation() + " time:" + customEvent.getTimestamp());
    }
}
