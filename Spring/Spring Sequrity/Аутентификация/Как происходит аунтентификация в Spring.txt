Внутри SequrityFilterChane содержится AuthenticationFilter, который с помощью AuthenticationManager может подгрузить разные провайдеры, 
и с помощью этих провайдеров и происходит процесс аутентификации. То есть, AuthenticationManager проходится циклом по всем провайдерам и по очереди пытается произвести аутентификацю.
Как только аутентификация будет пройдена, значит пользователь есть в нашей системе.После того, как пользователь прошел процесс аутентификацию, все начинается крутиться 
вокруг SequrityContext, сам же SecurityContext является оберткой вокруг объекта аунтентификации.

В нашем приложении может быть настроено несколько провайдеров.
DaoAutentification provider:
JWT provider:
OAuth provied
Объект аутентификации - это тот объект, который хранит всю информацию о пользователе, и имеет 3 значения:
Principal       - тут храниться вся информация о нашем пользователи, по сути в Principal хранится наше DTO. Тут как правило, наш service должен реализовать 
		  интерфес UserDetailsService.

Credentials     - как правило, тут хранится пароль, но после успешной аутентификации, те значения которые хранит в себе  Credentials будут удаляться, то есть, все пароли будут удалены, это делается из-за безопасности.
	          Пример: После того как user прошел аутентификацию, чтобы его пароль не гулял по всему нашему приложению, нам нужно почистить Credentials.

Authorities     - тут храняться роли пользователей и эти роли должны будут реализовать интерфейс GrantedAuthority



Чтобы иметь доступ к SequrityContext, нужно использовать SequrityContexHolder. SequrityContexHolder имеет много стратегий и одна из самых распространенных это ThreadLocal<>.
TheadLocal<> - это что-то типа ассативного массива, где ключем является поток, а значением параметризованное значение в нашем случаи это  SequrityContext.
После удачной аутентификации мы положим данные пользователя в TheadLocal<SequrityContext>, а когда пользователь выйдет, нам нужно будет почистить headLocal<SequrityContext>.

===========================================================================================================================================================================
Логика того, как реализован функионал нашего фильтра:
1. Нам нужно создать объект Аунтентификации
2. Нам нужно создать менеджер Аунтентификации
3. В менеджер аунтентификации нужно передать объект из пункта 1. Под копотов, менеджер аунтентификации пробегается циклом по разным провайдерам(их может быть много).
   и по очереди пытается провести аутентификацию до тех пор, пока пользователь не пройдет аутентификацию

=================

Базовые филтры, который нам предоставляет SpringSequrity их всего 15 штук:
1. CsrfFilter
2. UsernamePasswordAuthenticationFilter
3. LogoutFilter
4. DefaultLoginPageGenertedFitler - фильтер, который за нас сгенерирует HTML страницу для логина
5. DefaultLoginPageGenertedFitler - фильтер, который за нас сгенерирует HTML страницу для логаута 
6. FilterSequrityInterceptor - фильтер для авторизации.

Эти фильры включены по-умолчанию. К примеру, при подключение starter-sequrity, мы так же заиспользуем фильтер DefaultLoginPageGenertedFitler и если мы перейдем 
по адрессу localhost:8080/login мы попадем на ту самую страницу, которая сгенерировалась за нас

пароль так же генерируется сам и мы его сможем увидить в консоли, а username по-умолчанию используеться "user" это мы можем увидеть в SecurityProperties
фильтер Logout так же предоставляется нам

Во время открытия сессии, эта сессия привязывается к Cookies, а Cookies хранят в себе JSESSIONID пользователя 