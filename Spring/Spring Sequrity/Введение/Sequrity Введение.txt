Как работает Spring Security - Spring Security предоставляет свой filter chain,подобной той, что используется в сервлетах, 
			       то есть, у нас есть некий контейнер внутри которого есть ряд фильров и эти фильтры срабатывают один за другим, но в случае Spring Security,
 			       в этом контейнере есть также главнынй фильтр, DelegationFilterProxy, который хранит в себе бин FilterChainProxy и уже этот бин вызывает SequrityFilterChain,
 			       в котором реализована конечная цепочка вызова фильтров для обеспечения безопасности. Если условия фильтров будут соблюдены, тогда запрос от клиента попадет в 
			       DispetcherServlet

SecurityFilterAutoConfiguration - Класс для автоконфигурации.
SecurityProperties		- Класс, который содержит в себе настройки для properties.
FitlerChainProxy		- Это бин.



====================================================================================================================================

DelegationFilterProxyRegistrationBean - главный класс, который занимается тем, что создает DelegationFilterProxy.

DelegationFilterProxy - это фильтр, который подчиняется сервлет контейнеру и содержит в себе бин FilterChainProxy 
Он может быть объявлен в web.xml или с помощью аннотации @ServletComponentScan для автоматического обнаружения.

SecurityFilterChain — представляет собой конкретную цепочку фильтров, предназначенную для обработки запросов связанных с безопасностью. 
Она содержит различные фильтры для выполнения задач аутентификации, авторизации и других аспектов безопасности.

SpringBootWebSecurityConfiguration - класс, который создает SequrityFilterChain. Дает возможность нам реализовать свою логику аутентификации
 
====================================================================================================================================
SequrityFilterChain

		@Bean
		@Order(SecurityProperties.BASIC_AUTH_ORDER)
		SecurityFilterChain defaultSecurityFilterChain(HttpSecurity http) throws Exception {
			http.authorizeHttpRequests().anyRequest().authenticated();
			http.formLogin();
			http.httpBasic();
			return http.build();
		}


====================================================================================================================================
Жизненный цикл филтра в сервлетах 
1. init() - инициализация фильтра 
2. doFilter() - метод в котором описана логика для авторизации, аутнентификации
3. deStroy() - завершение 
