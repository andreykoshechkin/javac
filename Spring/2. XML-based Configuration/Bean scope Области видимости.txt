Области видимости -  это определение того, насколько долго и каким образом будет существовать экземпляр бина

Это интерфесы: WebApplicationContext, ApplicationContex, Scope 

============================================================================================================================================================

Сам же Bean Scope имеет три типа:
1. Common(ApplicationContex)Общий тип - Имеет два основных scope это singlton и prototype. Singlton озночает, что бин будет хранится в одном экземпляре, a prototype значит, что 
   будет создаваться новый бин, когда мы попросим его у ApplicationContex (prototype не хронится в contexte). Так же есть и 3ий тип это thread, который создает бины для конкретного потока
   (Пример thread: если у нас есть 10 потоков, которые обращаются к одному ApplicationContex то будет создано 10 бинов ). Thread нужно подключать дополнительно.
   По-умолчанию Spring использует singlton.
   В случае prototype, бан не хранится в map

   Prototype:
   К примеру, у нас есть бин prototype и когда мы будет использовать его у другого бина, бин prototype будет создаваться и внедряться по новой
   Spring не хронит prototype в di conteiner, то есть, когда мы движемся по всей цепочки жизненого цикла бина, то в конечном итоге, если этот бин являеться prototype, то он там 
   не останеться, dr container его сразу вернет тому кто его попросил. Это проиходит из-за того, что бин prototype будет в последующем создан по-новой, а вот singlton останется
   Когда мы просим бин prototype по его id, каждый раз приходится проходить весь жизненный цикл по новой, так как он не хранится в map.


2. Web(WebApplicationContext) - Имеет 4 scope, это request, session, application, websocket. 
   Request - для каждого Http Запроса будет создан свой бин.
   Session - для каждой сессии будет создан свой бин
   application - для каждого сервлета  будет создан свой бин
   webScoket - для каждого сокета будет создан свой бин


3. Custom - для создания своих scope. Для этого нужно, реализовать интерфейс Scope и зарегистрировать его с помощью метода registerScope

============================================================================================================================================================
