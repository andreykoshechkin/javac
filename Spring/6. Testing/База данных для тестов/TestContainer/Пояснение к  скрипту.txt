1. В скрипте нам нужно явно указывать ID, так как при тестировании, база данных поднимается по новой, и id для сущностей устанавливается рандомно.
   Пояснение: При первом поднятие базы данных, для компании Google установился id=1, при втором поднятие, id может быть = 3.
	      если мы впервый раз вызовем метод findById(1) то получим Google, при повторном вызове, id google может быть другим, следовательно метод вернет нам уже не google и тест упадет.

   По этому, мы должны явно прописать id. 

INSERT INTO company (id, name)
VALUES (1, 'Google'),
       (2, 'Meta'),
       (3, 'Amazon');


SELECT setval("company_id_seq", (SELECT MAX(id) FROM company))	

2. SELECT setval("company_id_seq", (SELECT MAX(id) FROM company))	<-- Создание sequence, который автоматически сгенерирует первичный ключь начиная от последнего id

============================================================================================================================================================================================================================

ChatGPT:

Явное указание ID:

При каждом запуске тестовой базы данных, у вас может быть разное начальное значение для идентификаторов, и это может повлиять на тесты, которые зависят от конкретных значений идентификаторов.
Вставка данных с явным указанием идентификаторов в тестовых сценариях - это один из способов стабилизировать тесты и избежать проблем с динамическими идентификаторами при каждом перезапуске базы данных.
Ваш SQL-скрипт, который явно устанавливает идентификаторы и затем корректирует счетчик последовательности, может быть полезным подходом для тестирования.

Создание последовательности:

Ваш запрос SELECT setval("company_id_seq", (SELECT MAX(id) FROM company)) используется для установки текущего значения счетчика последовательности (company_id_seq) равным максимальному значению в столбце id таблицы company.
Это действие может быть полезным в тестовых сценариях, где вы хотите, чтобы последовательность начиналась с текущего максимального значения идентификатора в таблице.
Оба этих подхода могут быть полезными в тестовых сценариях для стабилизации данных и обеспечения предсказуемого поведения при тестировании. Однако, в боевых приложениях обычно не требуется явное управление счетчиками последовательностей, поскольку это обработывается автоматически.





