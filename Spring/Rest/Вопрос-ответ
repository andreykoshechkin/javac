1.	Что из себя представляет REST – это архитектурный стиль, который передает состояние, то есть, теперь нам не нужно передавать всю HTML страницу, теперь мы передаем только данные.

2.	Какие преимущества дает REST – мы теперь может использовать методы PUT, PUTCH, DELETE! Если бы мы использовали controller, не предполагает использования этих методов, так как controller возвращает всю HTML страницу, а форма на HTML страницу поддерживает только get/post операции. Так же, наши сервисы теперь работают не только для браузера, мы можем передавать данные в любом формате, к примеру в формате JSON или XML
 
3.	Каким принципам должен следовать REST?:
1) Состояние хранится на клиенте. Этот принцип позволяет уменьшить нагрузку на наш сервер.

2) Единый интерфейс – у нас должен быть единый протокол для всех соединений. Для Rest это HTTP.

3) Наша система должны быть разбита на слои.
•	Слой представления (Representation Layer): Этот слой отвечает за предоставление данных, которыми обмениваются клиент и сервер. Это могут быть форматы данных, такие как JSON или XML. Клиенты и серверы взаимодействуют через представления ресурсов.

•	Слой приложения (Application Layer): Этот слой содержит бизнес-логику. 

•	Слой хранилища данных (Data Storage Layer): этот слой содержит базы данных.

•	Слой управления (Control Layer): Этот слой управляет потоком данных между клиентом и сервером. Он регулирует доступ к ресурсам и обеспечивает безопасность. 

•	Слой сетевого уровня (Network Layer): Этот слой отвечает за передачу данных между клиентом и сервером по сети. 

4) Кешируемость - REST поддерживает кеширование и по-хорошему, ответы от сервера, должны быть закешированы. Это улучшает производительность и снижает нагрузку на сервер.

5) Код по требование – по желанию, сервер может отправлять исходный код клиенту.

6) Идентификация ресурсов – каждый ресурс должен быть идентифицирован с помощью URI.

4.	Идемпотентные Методы – те методы, которые могут быть повторно выполнены без изменения результата. Пример: если мы используем метод для получения данных, то при повторном получение этих данных, у нас должен быть такой-же результат.

5.	Что Такое Ресурс REST?  -  ресурс — это конкретный объект или данные, к которому мы можем получить доступ через URI, например HTML-странице, изображению, видео



6.	Что отличает AJAX И REST: 
•	Ajax — это технология для асинхронного обновления интерфейса пользователя

•	REST — это архитектурный стиль для взаимодействия между сервером и клиентом.

7.	Разница между PUT и PATCH – PUT обновляет всю сущность, а PATCH обновляет только поля.

8.	Форматы данных в REST API – основные это - JSON, XML

9.	Безопасность в RESTful API: - Безопасность в Rest обеспечивается с помощью HTTPS или Oauth 2.0

10.	Запросы с параметрами в REST API - параметры передаются через URI или тело запроса для фильтрации данные

11.	Состояние в Rest – запрос от клиента, содержит всю необходимую информацию, сервер не хранит состояние между запросами.

12.	JSON в REST API: Преимущества JSON, в его читаемости, удобства. 

13.	Медиатип в REST API – Определяет формат представления данных. Примеры: application/json, application/xml

14.	Инструменты для тестирования и документирования REST API: Swagger/OpenAPI, Postman Junit

15.	Версионирование в REST API – версионирование, обеспечивает совместимость между клиентом и сервером при добавление нового функционала.

Мы можем указать версию следующими способами: 

1) С помощью URI, самый простой способ, но если у нас будет много ресурсов, то менять версию будет неудобно.

2) Версия в заголовке. Это тогда, когда мы в header передаем версию Rest приложения.


16.	Разница между @Controller and @RestController – разница заключается в способе создания HTTP ответа. @Controller возвращает String (Это имя View, название HTML страницы), а @RestController может возвращать любые данные.








Список аннотаций для Rest:
@RestController – используется для создания RESTfull веб-сервисов и где в качестве HTTP ответа, возвращаются любые данные в виде JSON или XML.
@RequestMapping – эта аннотация позволяет указать URL нашего сервиса, чаще всего выступает как общий префикс для методов в нашем контроллере.
@PathVariable – извлекает значение из URL
@RequestParam – извлекает параметр из URL.
@RequestBody – привязывает тело запроса к параметру метода.
@ResponseBody – указывает что возвращаемый объект из метода, должен быть привязан к телу запроса
@ResponseStatus – Устанавливает HTTP статус для ответа.
@ExceptionHandler – указывает, что метод обрабатывает исключения. Если в параметрах не указать конкретный exception, то в таком случае будут обрабатываться все исключения. Если же мы в параметрах укажем конкретный exception. То наш HandlerExceptionResolver сработает только в том случае, если у нах возникнет этот exception.
@ModelAttribute – позволяет установить в атрибуты какие-то значения.
@Valid, @Validation – эти аннотации активируют валидацию.
@RequestHeader – помогает извлечь заголовок из запроса
@CookieValue – извлекает значения, которые храниться в куках
@RequestPart – используется для обработки многопочетных запросов.
@RequestAttribute – извлекает аттрибуты из запроса.
@RestControllerAdvice – указывает что класс является глобальным обработчиком для RestController.


