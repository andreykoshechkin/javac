Что из себя представляет Component-scan # это механизм, позволяющий автоматически обнаруживать и регистрировать бины (компоненты) в контексте приложения.

Как работает component-scan:    # component-scan работает  с помощью класса ComponentScanBeanDefinitionParser, который автоматически подтягивает Bean Definition Readers

Bean Definition Readers		# Это набор компонентов, которые занимаются тем, что считывают конфигурационный файл или класс и на основании этого конфига создают BeanDefinition.
				  В Spring есть 3 основных реализизации Bean Definition Readers, какой конкретно мы хотим использовать, зависит от того, каким способом мы решили конфигурировать наш бин.
				  Когда контейнер IoC инициализируется, Bean Definition Readers считывают конфигурацию и создают объекты BeanDefinition, которые представляют собой метаданные для создания и настройки бинов.
				  Затем контейнер IoC использует эти метаданные для управления жизненным циклом бинов, внедрения зависимостей и выполнения других функций, предоставляемых Spring Framework.	
 

ComponentScanBeanDefinitionParser: Именно он сканить наш compoenent-scan элемент в нашем XML файле.

====================================================================================================================================================================================================================
1. XmlBeanDefinitionReader 			# используется в XML-based. Данный reader используется поумолчанию и занимается тем, что парсит XML и выявляет те
 						  элементы, которые помечены элементом bean и на основании этого создается bean definition.

2. AnnotatedBeanDefinitionReader 		# обрабатывает Annotation-based. Именно этот reader используется, когда мы хотим просканировать какой-то пакет и найти те классы, которые помечены 
					 	  аннотацией @Component. Для реализации используются фильтры. Так же есть ClassPathDefinitionScanner, который отличается от AnnotatedBeanDefinitionReader
					 	  только тем, что AnnotatedBeanDefinitionReader дает возможность регистрировать бины в ручную.

3. ConfigurationClassBeanDefinitionReader	# Используется в Java-based. Данный reades обрабатвает те класс и зависимости, который отмечены аннотациями @Configuration и @Bean. 
						  Работает совместно с другими компонентами, такими как AnnotatedBeanDefinitionReader, 
						  чтобы обеспечить правильное создание и конфигурацию бинов на основе Java-кода.


Еще есть два дополнительных reades(читателей): Оба работают в случаях, когда конфигурация лежит в XML.

1. PropertiesBeanDefinitionReader 		# обрабатывает информацию из properties.

2. GroovyBeanDefinitionReader  			# позволяет использовать Groovy для конфигурации.



Когда контейнер IoC инициализируется, Bean Definition Readers считывают конфигурацию и создают объекты BeanDefinition, которые представляют собой метаданные для создания и настройки бинов.
Затем контейнер IoC использует эти метаданные для управления жизненным циклом бинов, внедрения зависимостей и выполнения других функций, предоставляемых Spring Framework.