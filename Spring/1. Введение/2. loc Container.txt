DI container 		# Это контейнер, который предоставляет нам механиз, который автоматически внедряет в объект нужные зависимости.
			  Сам  DI container представлен ввиде map, где ключем является String, а значением Been.

IoC contaier 		# Это контейнер, который решает задачу по созданию и управлению объектами, тем самым освобождая нас от необходимости явно создавать и управлять зависимостями.
			 

Been			# Это объект который был создан на основании Been difinition, со всеми нужными зависимостями. Его отличие от обычного объекта 
			  в том, что бинами принято называть те объекты, которые управляются Spring-ом

Been difinition		# Bean definition это шаблон который был создан на основании метаданных, сами же методанные описывают, как создавать и настраивать bean.
			  Простыми словами: Been difinition чертеж по которому строится Been

Spring приложение 	# Состоит из набор бинов, которые связаны через IoC контейнер.

POJO			# Обычный объект с набором свойст, а так же с геттерами/сеттерами и конструктором(DTO, Entity)
 
================================================================================================================================================================

IoC container берет информацию из "bean definitions" и на основе этой информации создает и настраивает бины (объекты)

================================================================================================================================================================

IoC container реализует один из интерфейсов:
1.beans.factory.BeenFactory.	
2.context.ApplicationContext.	<---Предпочителен + реализует интерфейс beans.factory.BeenFactory, что дает нам больше функционала

================================================================================================================================================================


Мы можем создать Been difinition 3мя разными способами:
1)XML-based - в настоящее время редко используеться. В основном используеться для старых проектов
2)Annotation-based
3)Java-based	
