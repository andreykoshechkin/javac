Bean Definition:
Этот этап представляет собой загрузку метаданных о бинах из конфигурации. Определения бинов описывают, как создать и настроить бины.

BeanFactoryPostProcessors:
Этот этап предоставляет возможность вмешательства в процесс создания бинов до их фактической инициализации, 
а чтобы использовать BeanFactoryPostProcessors нужно создать класс, который реализует интерфейс BeanFactoryPostProcessor и переопределить его единственный метод postProcessBeanFactory 

Сортировка бинов:
Если в конфигурационным файле есть несколько бинов, которые зависят друг от друга, то они должны быть отсортированы, потому что, один bean нельзя проинициализировать, когда второго бина не существует.

Инициализация бинов:
На этом этапе контейнер создает экземпляры бинов и выполняет их инициализацию. Это включает в	е зависимостей.

Вызов сеттеров:
Spring внедряет значения в свойства бинов, используя сеттеры, но только в том случае, если setter's есть у нашего бина.(Если класс не содержит setter, то этот этап будет пропущен)

Before initialization:
Этот этап предоставляет возможность вмешательства в процесс инициализации бина перед тем, как он фактически будет проинициализирован. BeanPostProcessors могут выполнять дополнительные действия.

Инициализация callback:
callback Инициализации нужен в тех случаях, когда, мы хотим дополнительно подкрутить наши объекты. Для вызова init callback, 
нам необходимо реализовать либо интерфейсы InitializingBean либо поставить аннотацию @PostConstruct

After initialization:
Этот этап предоставляет еще одну возможность вмешательства после того, как бин был проинициализирован. BeanPostProcessors могут выполнять дополнительные действия.

Получение бина:
Теперь бин готов к использованию, и вы можете получить к нему доступ из контейнера.

Destroy callback:
Этот этап нужен, когда мы хотим почистить все ресурсы после нашего бина. Для вызова destroy callback, нам необходимо реализовать либо интерфейсы DisposableBean 
либо поставить аннотацию @PreDestroy. Будет вызваны методы только в том случает, когда мы закрываем наш context. Destroy callback вызывается только для singleton, так как
prototype не хронятся в  applicationContext.
(Примечание: в случае init and destroy, наши методы по инициализации и уничтожение должны быть БЕЗ ПАРАМЕТРОВ И НИЧЕГО НЕ ВОЗВРАЩАТЬ)

Примечание: Жизненный цикл бинов в Spring может зависеть от их области видимости (например, singleton, prototype) и способа конфигурации контейнера (XML, JavaConfig, аннотации).