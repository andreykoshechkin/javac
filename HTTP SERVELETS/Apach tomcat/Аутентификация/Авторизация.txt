
@WebFilter("/*")
public class AuthorizationFilter implements Filter {

    private static final Set<String> PUBLIC_PATH = Set.of(LOGIN, REGISTRATION);

    @Override
    public void doFilter(ServletRequest servletRequest, ServletResponse servletResponse, FilterChain filterChain) throws IOException, ServletException {
        String requestURI = ((HttpServletRequest) servletRequest).getRequestURI();      //Позволяет понять, к какому ресурсу идет пользователь. На основании этого мы можем сказать пользователю, что ему разрешено, а что нет

        if (isPublic(requestURI) || isUserLoggedIn(servletRequest)) {                    //Если русурс(uri) публичный или у пользователя есть доступ, по перенаправль его
            filterChain.doFilter(servletRequest, servletResponse);
        } else {
            ((HttpServletResponse)servletResponse).sendRedirect("/login");              //Иначе перенаправль на страницу /login
        }
    }

    private boolean isUserLoggedIn(ServletRequest servletRequest) {

        User user = (User) ((HttpServletRequest) servletRequest).getSession().getAttribute("user");
        return user != null;
    }

    private boolean isPublic(String requestURI) {
        return PUBLIC_PATH.stream().anyMatch(requestURI::startsWith);
    }
}
