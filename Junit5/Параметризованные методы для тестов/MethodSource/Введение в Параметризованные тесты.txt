@ParameterizedTest	//Позволяет сделать из обычного тест-метода, параметризованный тест-метод. Пишется вместо @Test

============================================================================================================================================================

@NullSource  		//Позволяет подставить параметры, реализовывает NullArgumentsProvider. Подставляет null значения в наши параметры
@EmptySource		//Позволяет подставить параметры, реализовывает EmptyArgumentsProvider.Подставляет пустое значения в наши параметры
@ValueSource 		//Позволяет подставить параметры, реализовывает ValueArgumentsProvider.
@NullAndEmptySource	//Позволяет подставить параметры, в этой аннотации лежит и @NullSource и @EmptySource

Ограничения: У метода должен быть только один параметр. ДАННЫЕ АННОТАЦИЯ ИСПОЛЬЗУЮТСЯ РЕДКО. 

Реализация аннотаций в примере:
      @ParameterizedTest
        @NullSource
        @EmptySource
        @ValueSource(strings = {
                        "Ivan", "Andrey"
                })
        void loginParametrizedTest(String username){
            userService.add(ANDREY, IVAN);
            Optional<UserDto> login = userService.login(username, null);
        }
Если мы запустим дебаг, то сначала, сработает:
@NullSource аннотация и параметр будет иметь значения null. 
Далее сработает аннотация @EmptySource и параметр будет иметь пустую строку
Далее сработает аннотация @ValueSource(strings = "ivan") и параметр будет иметь значение "ivan"


============================================================================================================================================================