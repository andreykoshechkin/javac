Defualt(Build) - это основной набор фаз, отвечающий за жизнедеятельность проекта. Имеет 7 основных фаз, при этом, когда мы вызываем какую-то фазу, то сначала будет вызваны 
все предыдущие фазы, а потом лишь та, которую мы вызвали:

	Фазы>>>	validate: 	проверяет на коректность проект
	Фазы>>>	compile: 	компилирует наш проект
	Фазы>>>	test: 		запускает тесты
	Фазы>>>	package:	занимается упаковкой проектов в нужный артефакт
	Фазы>>>	verif: 		запуск интеграционных тестов
	Фазы>>>	install: 	занимается копированием артефактов с фазы package в локальный репозиторий
	Фазы>>>	deploy:		берет из артефакты из локального репозитория и отправляет их в удаленный
============================================================================================================================================

Defualt(Build) Полный список фаз:
	Фазы>>>	validate: 		проверяет на коректность проект
	Фазы>>>	initialize:		расчитана на то, чтобы мы привязали свой плагин 
	Фазы>>> generate-sources: 	расчитана на то, чтобы мы сгенерировали какие-то исходники
	Фазы>>> process-sources: 	Обработчик исходников(мы можем отфильтровать, поставить какие-то значение исходникам)
	Фазы>>> generate-resources:     расчитана на то, чтобы мы сгенерировали только ресурсные файлы
	Фазы>>> process-resources: 	Обработчик ресурсных файлов.
	
	Фазы>>>	compile:	 	компилирует наш проект
	Фазы>>>	processTest-sources:	такой-же как и process-sources только для тестов файлов 
	Фазы>>>	test-compile:		скомпилировать все что находится в директории ---> src ---> test 
	Фазы>>>	test: 			запускает тесты
	Фазы>>>	package:		занимается упаковкой проектов в нужный артефакт(поумолчанию в jar)
	Фазы>>>	verif: 			запуск интеграционных тестов
	Фазы>>>	install: 		занимается копированием артефактов с фазы package в локальный репозиторий
	Фазы>>>	deploy:			берет из артефакты из локального репозитория и отправляет их в удаленный

============================================================================================================================================

Поумолчанию, фаза package упаковывает проект с расширением jar, но этот jar не содержит в себе те зависимости который указанны в pom.xml, в jar файле будет только голый код

с помощью <packaging>war</packaging> мы можем это расширение.
Пример:
  <packaging>war</packaging> <--- изменили с jar на war

  <groupId>com.koshechkin</groupId>
    <artifactId>first-maven-project</artifactId>
    <version>1.0.0-SNAPSHOT</version>

Так же, тот jar файл который мы получим при помощи package не БУДЕТ СОДЕРЖАТЬ В СЕБЕ ТЕ ЗАВИСИМОСТИ КОТОРЫЕ ЕСТЬ В POM файле
============================================================================================================================================  