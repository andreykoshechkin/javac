import lombok.extern.slf4j.Slf4j;
import org.springframework.scheduling.annotation.Scheduled;
import org.springframework.stereotype.Component;

import javax.annotation.PostConstruct;
import javax.annotation.PreDestroy;
import java.util.concurrent.ExecutorService;
import java.util.concurrent.Executors;
import java.util.concurrent.TimeUnit;

@Slf4j
@Component
public class MyScheduledTask {

    private ExecutorService executor;

    @PostConstruct
    public void init() {
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—É–ª–∞ –ø–æ—Ç–æ–∫–æ–≤ –∏–∑ 5 –ø–æ—Ç–æ–∫–æ–≤
        executor = Executors.newFixedThreadPool(5);
        log.info("–ü—É–ª –ø–æ—Ç–æ–∫–æ–≤ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω (5 –ø–æ—Ç–æ–∫–æ–≤)");
    }

    @Scheduled(fixedRate = 60000) // –∫–∞–∂–¥—ã–µ 60 —Å–µ–∫—É–Ω–¥
    public void runTask() {
        executor.submit(() -> {
            try {
                log.info("–ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞ –≤ –ø–æ—Ç–æ–∫–µ {}", Thread.currentThread().getName());

                // üëâ –ó–¥–µ—Å—å —Ç–≤–æ—è –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞
                performWork();

                log.info("–ó–∞–¥–∞—á–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –≤ –ø–æ—Ç–æ–∫–µ {}", Thread.currentThread().getName());
            } catch (Exception e) {
                log.error("–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –∑–∞–¥–∞—á–∏", e);
            }
        });
    }

    private void performWork() throws InterruptedException {
        // –ü—Ä–∏–º–µ—Ä –ª–æ–≥–∏–∫–∏
        Thread.sleep(5000); // –∏–º–∏—Ç–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã
        log.info("–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—Å–Ω–æ–≤–Ω–∞—è –ª–æ–≥–∏–∫–∞ –∑–∞–¥–∞—á–∏");
    }

    @PreDestroy
    public void shutdown() {
        log.info("–ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã ExecutorService...");
        executor.shutdown(); // –∑–∞–ø—Ä–µ—â–∞–µ–º –ø—Ä–∏—ë–º –Ω–æ–≤—ã—Ö –∑–∞–¥–∞—á

        try {
            if (!executor.awaitTermination(30, TimeUnit.SECONDS)) {
                log.warn("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞—á–∏ –≤–æ–≤—Ä–µ–º—è. –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∞...");
                executor.shutdownNow(); // –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ
            } else {
                log.info("ExecutorService —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É");
            }
        } catch (InterruptedException e) {
            log.error("–ü—Ä–µ—Ä—ã–≤–∞–Ω–∏–µ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ ExecutorService", e);
            executor.shutdownNow();
            Thread.currentThread().interrupt();
        }
    }
}
