Базы данных:
	----Это некое хранилище, которое дает нам возможность, долговременно хранить информацию на жестком диске. Дело в том, что те приложения, которые 
            написанны на одной из языков программирования работают в оперативной памяти и если произойдет непривиденные обстоятельста (напр. выключится свет)
	    то этот код будет уничтожен. 

СУБД:
	---- это Система управления базами данных, по сути СУБД представляет из себя приложение, которое вертится в оперативной памяти 
	     и задача любой из СУБД состоит в том, чтобы быстро достать данные из таблиц, сами же таблицы храняться на жестком диске.
	     Каждая СУБД обладает своими отличиями (напр. встроенными типами данных) и своим процедурным языком программирования.

Реляционные базы данных:
	---- Реляционные базы данных это скажем некое представление или даже стратегия СУБД, которая представляет нам 
	     совокупность таблиц, так как любая реляционная база данных в своей реализации использует табличную струтуру 
	     и эти таблицы могут быть связанны между собой, а могут бы и не связанны вовсе.
	     У реляционных баз данных есть взаимосвязь между таблицами, у нереляционных баз данных ее нет

Структура общение приложение:
	----У нас есть приложение написанное на одном из языков программирования и это приложение лишь отображает информацию, сама же информация берется 
	    со стороны backend'a, а backend в свою очередь обращается в базу данных.

backend ----Серверное приложение, которые написано на одном из серверных языков программирования.

SQL 	--- Это стандарт

Строки --- называются записями
Столбцы --- Полями
		
====================================================================================================================================

Sql имеет два основных раздела:
	----DDL нужен для создания структуры данных. Имеет такие операции как:
	    CREATE для создание чего-то(таблиц, самой базы данных).
	    DROP для удалениеи чего-то(таблиц, самой базы данных).
	    ALTER для изменения чего-то.
	
	----DML нужен для манипуляции с данными.Имеет такие операции как:
	    INSERT INTO для добавления значений в созданные поля(поля нужно инициализировать при создание даблицы).
	    DELETE для удаление полей.
	    UPDATE для обновления
	    SELECT для выборки каких-то полей. 

INSERT DELETE UPDATE поумолчанию возвращают INT, то есть количество удаленных, сохраненных и обновленных данных

information schema 		//Конфигурационная схема, которая содержит информацию о таблицах в  нашей базе данных
pg_catalog			//Конфигурационная схема
	  

Ограничения в таблицах:
	----NOT NULL не позволяет вставдять нам пустое значение ю
	----UNQUE не позволяет дублировать значение полей. Два поля не могу быть с одним id. Так же мы можем задать групповое UNIQUE, тогда два поля не могут быть одинаковыми:
	    Пример: UNIQUE (first_name, last_name) теперь мы не сможем добавить в таблицу 'Andrey', 'Andrey' но мы сможем добавить 'Andrey', 'Koshechkin'.		    

	----CHECK задает какое-то условия для нашаго поля, к примеру: CHECK(data > '2015-01-01' and data < '24-01-1' )
	----PRIMERY KEY устанавливает, что поле должно быть уникальным и при этом не повторятся. Только одно поле может иметь PRIMARY KEY
	    PRIMARY KEY нужен чтобы задать уникальный ключ для одного поля.
	    Команда SERIAL является неким счетчикм последовательности, ее устанавливать нужно на том поле, которое помеченно как PRIMERY KEY, тем самым PRIMERY KEY будет увеличиватся на 1 
	    взависимоти от того сколько элементом мы добавили. Так же, поле которое помеченно как PRIMERY KEY лучше убрать из INSERET.

Установление Альясов(Alias):
	----Операция, когда мы хотим, чтобы именна в таблице именовались иначе.
	SELECT id indetificator,
	       name f_name,
 	       FROM employee;
	Теперь в нашей таблице именна полей будут представленны как indetificator f_name 
	----В некоторых СУБД отсутствует поддержка Альясов в том ввиде как это представленно в postgresql, поэтому,  для других СУБД нужно использвать ключевое слово AS.
	    Пример: SELECT id,
			   name AS f_name,
		    FROM emoloyee