1 - для включения поля в результат.
0 - для исключения поля из результатов.
{} - это пустой объект в качестве условия поиска, что означает, что мы хотим выбрать все документы из коллекции "users".


db.users.find({}, { "name": 1, "_id": 0 });		# Подобный синтаксис озночает следующее: найди и верни мне только имя.

db.users.insert({ "name": "Richard", "age": 18 });	# Операция вставки


use db_name: 						# Переключиться на определенную базу данных. Например, use mydb переключит вас на базу данных с именем "mydb".

show dbs: 						# Показать список всех доступных баз данных.

show collections: 					# Показать список коллекций в текущей базе данных.

db.collection_name.find(): 				# Найти все документы в указанной коллекции. Например, db.users.find() вернет все документы из коллекции "users".

db.collection_name.insert(document): 			# Вставить новый документ в указанную коллекцию. Например, db.products.insert({ "name": "Product1", "price": 19.99 }) вставит новый документ в коллекцию "products".

db.collection_name.update(query, update): 		# Обновить документы, соответствующие указанному запросу, с помощью указанных обновлений.
							  Пример: db.users.update({ "name": "Sveta" }, {"$set" : {"name" :"Maria"}})


db.collection_name.remove(query): 			# Удалить документы, соответствующие указанному запросу, из коллекции.
							  Пример: db.users.remove({"age":20}) <--Удалит того, у кого возраст = 20

db.collection_name.drop(): 				# Удалить всю коллекцию и все ее документы.

db.collection_name.aggregate(pipeline): 		# Выполнить агрегацию данных в коллекции с использованием заданного агрегационного пайплайна.

db.collection_name.count(query): 			# Подсчитать количество документов, соответствующих указанному запросу.

db.createCollection(name, options): 			# Создать новую коллекцию с указанным именем и параметрами.

db.dropDatabase(): 					# Удалить текущую базу данных со всеми ее коллекциями.