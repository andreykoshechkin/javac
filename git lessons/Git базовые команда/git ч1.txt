Файл .gitignore 	//Нужен для скрытие файлов и папок от самого git.Обычно скрывает временные файлы и папки. Расположен в корне проекта.
==============Начальная конфигурация гита===========================================================================================================================================
git config --global user.name"username"
git config --global email.name"email"
git config --global color.ui true
====================================================================================================================================================================================

git init 		//Создаст новый локальный репозиторий в папке проекты.
git clone git@github.com:Koshechkin-Andrey/hibernate.git		//Копирует  репозиторий  c удаленного хранилища в локальное.

git add 		//Добавляет указанные файлы в зеленую зону 
git add . 		//Добавляет все файлы в зеленую зону
git add .java 		//Добавляет все файлы с расширением .java  В зеленую зону 

git commit -m "текс"	//Сохраняет все то что было добавленно с помощью  git add.
git log			//История коммитов
git reflog 		//показывает историю указателя(отлично подходит при работе с git reset)

git diff 		//Покажет разницу между неотслеживаемым состоянием репозитория и последнем коммитом
git diff --staged	//Покаже разницу между отслеживаемым файлом и последнем коммитом
git diff COMMIT_ID 	//Показывает разницу между текущим состоянием репозитория и последним коммитом

git fetch 		//Перенесет все изменения с удаленного хранилища в локальное (Происходит синхронизация локальнокго репозитория с удаленным)Обновляется информация
git pull 		//Можно забрать изменения с удаленного репозитория в локальное
git push		//Отправляет коммиты из локального репозитоия в удаленный .
git config --list	//Посмотреть конфиг

git clean		//Удаляет новые файлы, которые были добавлены в наш репозиторий(удалит все файла у которых статус Untracted file)
			  Параметры: git clean -n покажет какие файлы будут удалены
				     git clean -f удалит все Untracted file

====================================================================================================================================================================================
git reset 		//Опасная команда, которая позволяет перемещаться по истории комита. Имеет три параметра, [soft] [mixed] [hard].
git reset --soft	//Самая легкая команда. Возвращает проект к указанному коммиту, при этом переводит все коммиты после указанного в отслеживаемую (staged) зону
			  пример:git reset --soft HEAD^^ или git reset --soft da7997c44bb14111077193da6ca273ddba9e43f4

git reset --mixed       //Возвращает проект к указанному коммиту, при этом переводит все коммиты после указанного в неотслеживаемую (unstaged)зону.
git reset --hard	//САМАЯ ОПАСНАЯ КОМАНДА, Возвращает проект к указанному коммиту, при этом полностью удаляет все коммиты после указанного. 
			  НЕ УДАЛЯЕТ Untracted file(только что добавленные файлы)

git reset HEAD^^ -переместит указатель на 2а коммита назад (git reset HEAD^^^ на 3 коммита назад и тд)
git reset HEAD~2 - переместит указатель на 2а коммита назад(git reset HEAD~3 на 3 коммита назад и тд)
git reset HEAD commit_id - переместит указатель на коммите commit_id  (git reset --soft da7997c44bb14111077193da6ca273ddba9e43f4)

git reset --mixed HEAD@{2} тоже самое что и git reset HEAD~2
git reset --mixed HEAD@{2} тоже самое что и git reset HEAD^^ 

При этом, файлы которые мы добавили (они имеют статус untracked) не будут удалены, если мы воспользуемся командой git reset --hard HEAD


Примечение: Не стоит использовать git reset <commit ID> в случаях публичного репозитория. Дело в том, что к примеру у нас есть три коммита commit1---commit2---commit3,
	    и наши напарники начили работа начинаю с commit3, то если мы сделаем git reset --hard^^(вернемся к commit1, а commit2 commit3 будут удалены) то работа наших напарников так же удалится 

====================================================================================================================================================================================

