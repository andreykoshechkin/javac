Всего существует 3 стратегии наследования:
  TABLE_PER_CLASS - это когда потомки класса являются отдельными таблицами, они могут иметь общие поля которые им достались от родительского класса, при этом, потомки могут
		    иметь свои поля, которые будут в своих таблицах в бд. (таблицы родительского класса вообще нет в базе данных.)
		    Когда hibernate будет делать запрос на получение сущности, то под копотом произайдет union all.
 
  SINGEL_TABLE 	  - это когда, для всех потомков, есть одна общая таблица, где собственно хранятся данные 
		    потомков, и в этой общий таблице есть поле type, которое дает понять, к какому конкретно типу относится 
		    та или иная запись. (к программистам или к менеджерам)






  JOINED          - это когда и родительский класс и все его потомки являются отдельными таблицами в базе данных, при этом, у потомков будет id, который будет 
		    ссылаться на строку в таблец родительского класса.
		    Когда мы создаем get запрос на получение данных у родительского класса, то hibernate будет делать left outer join столько раз, 
		    сколько потомков есть у родительского класса. 
		
		    left outer join используется потому что, изначально неизвесто где находится нужная сущность, а inner join отсекает записи и справа и слева.

		    Плюсы: 
                         Данные нормализованны(для каждой сущности своя таблица)
			 
		    Минусы:
			 Не самая лучшая производительность, так как для операции INSERT, UPDATE, DELETE нам приходится использовать сразу две таблицы.
			 а в тех случаях, когда нам нужно сделать select всех данных, то будет создан left outer join столько раз, 
		         сколько потомков есть у родительского класса. 