1. Введение: 
Урок 5(Entity):

Правило: чтобы класс был hibernate сущностью он должен следовать следующим правилам:
1. Он должен быть POJO
2. Над ним должна стоять аннотация @Entity
3. У него должен быть id (@Id)

Прим:: id должен быть Serializable(тип данных Id должен реализовывать Serializable. String, Integer, Long и тд все они реализуют интерфейс Serializable)
================================================================================================================================================================

Урок 11(Entity Persister):
у каждоый сущности есть свой Entity Persister(Entity Persister <- перобразовывает модель, содержит простейшие crud  операции)

================================================================================================================================================================

Урок 14:
session.refresh(entity)	 берет значение из базы данных и вставляет в entity (поля в бд главнее чем в сущности);
session.merge(entity)    делает наооборот, поля в entity главнее чем в бд 

================================================================================================================================================================

Урок 15:

Java Persistence API (JPA)-набор интерфейсов и аннотаций которые дают возможноть сохранять java объектв в бд и наоборот извлекать данные из бд в перобразовывать их в java объекты
Hibernate - одна из JPA реализаций.
Hibernate использует session, в своб очередь session extend EntityManeger, а Entity Manager находиться в пакете javax.persistence(javax.persistence тут находяться все интерфейсы
который принадлежат JPA)
================================================================================================================================================================
кеш хранится в hashMap где ключем=id сущности и Entity Persisters, а значение=сама сущность
Serilazible находится в качестве ключа в first level cache

===================================================================================
Почему в этом запросе мы не видим select на company?? Ответ: в сущности users над полем Company company стоит fetch.Lazy, который создал прокси компании  
select
        users0_.id as id1_1_0_,
        users0_.company_id as company_7_1_0_,
        users0_.birth_day as birth_da2_1_0_,
        users0_.firstname as firstnam3_1_0_,
        users0_.lastname as lastname4_1_0_,
        users0_.role as role5_1_0_,
        users0_.username as username6_1_0_ 
    from
        users users0_ 
    where
        users0_.id=?