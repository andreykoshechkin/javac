Блокировки нужны чтобы мы не изменяли уровень изоляции транзакций, а если быть точнее
блокировки дают возможность ставить изоляцию для конкретных запросов, а не для всего приложения

Оптиместическая блокировка - позволяет решать конфликты с выполнением транзакций на уровне нашего приложения
Пессимистическая блокировка - позволяет решать конфликты с выполнением транзакций на уровне базы данных



OptimisticLockType.ALL: Суть заключается в том, что при обновлении записи мы в условия where включаем все поля, 
а не только поле version как это было с OptimisticLockType.Version.


OptimisticLockType.Version: Заключается в том, что когда одна транзакция обновляет данные, то поле version увеличиваеся на 1, и когда вторая транзакция будет делать update,
она не будет знать, что version уже изменился, следовательно, в условии where версионность для второй транзакции будет со старым значением.
После первой транзакции версионность поменялась с 0 на 1, а для второй транзакции версионность по прежнему 0

OptimisticLockType.DIRTY: что при обновлении записи мы в условия where включаем только то поле, которое мы обновляем 

PESSIMISTIC_WRITE: предотвращает чтение, обновление или удаление данных другими транзакциями.
PESSIMISTIC_READ(общая блокировка): только для чтения!мы не сможем делать какие-либо обновления или удаления.
PESSIMISTIC_FORCE_INCREMENT: обычная пессиместическая блокировка но нужна еще версионность которая будет увеличиваться